# COURT REPORTER INVOICE SYSTEM - REPLIT AGENT INSTRUCTIONS

## PROJECT OVERVIEW
Convert this court reporter invoice system from localStorage to a production-ready multi-user application with PostgreSQL database integration. Primary user is Valerie De Leon, CSR #13025, but the system must support multiple court reporters from day one.

## DATABASE ARCHITECTURE

### Requirements:
- Multi-user PostgreSQL database using Neon
- Complete user isolation (each user sees only their own invoices)
- Preserve existing invoice workflow and features
- Optimize for performance with proper indexes

### Complete Database Schema:

```sql
-- Users table with business information
CREATE TABLE users (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  email VARCHAR(255) UNIQUE NOT NULL,
  name VARCHAR(255) NOT NULL,
  business_name VARCHAR(255),
  license_number VARCHAR(100),
  license_type VARCHAR(50),
  phone VARCHAR(20),
  website VARCHAR(255),
  venmo_handle VARCHAR(100),
  address_street TEXT,
  address_city VARCHAR(100),
  address_state VARCHAR(10),
  address_zip VARCHAR(20),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Invoices table with user isolation
CREATE TABLE invoices (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  invoice_number VARCHAR(50) NOT NULL,
  date DATE NOT NULL,
  
  -- Client information
  client_name VARCHAR(255) NOT NULL,
  client_company VARCHAR(255),
  client_address TEXT,
  client_email VARCHAR(255),
  client_phone VARCHAR(20),
  
  -- Case/Project information
  case_name VARCHAR(255),
  county VARCHAR(100),
  
  -- Financial data
  total_amount DECIMAL(10,2) NOT NULL DEFAULT 0,
  tax_amount DECIMAL(10,2) DEFAULT 0,
  
  -- Status and metadata
  status VARCHAR(50) DEFAULT 'pending', -- pending, completed, overdue, closed
  notes TEXT,
  
  -- Timestamps
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  finalized_at TIMESTAMP,
  
  -- Ensure unique invoice numbers per user
  UNIQUE(user_id, invoice_number)
);

-- Line items table (normalized from invoice items array)
CREATE TABLE line_items (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  invoice_id UUID REFERENCES invoices(id) ON DELETE CASCADE,
  description TEXT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  order_index INTEGER NOT NULL DEFAULT 0,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Invoice numbering sequences per user per year
CREATE TABLE invoice_sequences (
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  year INTEGER NOT NULL,
  last_number INTEGER DEFAULT 0,
  PRIMARY KEY (user_id, year)
);

-- Performance indexes
CREATE INDEX idx_invoices_user_date ON invoices(user_id, date DESC);
CREATE INDEX idx_invoices_user_status ON invoices(user_id, status);
CREATE INDEX idx_invoices_status_date ON invoices(status, date DESC);
CREATE INDEX idx_line_items_invoice ON line_items(invoice_id, order_index);
CREATE INDEX idx_users_email ON users(email);
```

## AUTHENTICATION INTEGRATION

### Requirements:
- Add NextAuth.js with Google OAuth (and optionally GitHub)
- Create user record automatically on first login
- All database operations must be scoped to authenticated user ID
- Session management for secure access

### Implementation Notes:
- Use NextAuth.js version 4.x for Next.js 14 compatibility
- Store user information in the users table
- Implement proper session handling
- Add middleware to protect invoice routes

## MIGRATION STRATEGY

### localStorage to Database Mapping:

Current localStorage structure:
```javascript
// Example localStorage data structure
{
  finalizedInvoices: [
    {
      id: "uuid",
      invoiceNumber: "INV-2025-0001", 
      date: "2025-01-15",
      clientName: "John Doe",
      clientCompany: "ABC Corp",
      caseName: "Smith vs Jones",
      county: "Travis",
      lineItems: [
        { description: "Deposition", amount: 500.00 },
        { description: "Travel", amount: 100.00 }
      ],
      totalAmount: 600.00,
      status: "pending"
    }
  ],
  lastInvoiceNumber_2025: 1
}
```

Database mapping:
- Main invoice data → invoices table
- lineItems array → line_items table (normalized)
- lastInvoiceNumber_YYYY → invoice_sequences table
- User isolation → All tables include user_id

### Migration Steps:
1. Replace all localStorage.getItem() calls with database queries
2. Replace all localStorage.setItem() calls with database inserts/updates
3. Implement proper error handling for database operations
4. Add loading states for async database calls
5. Maintain invoice numbering sequence per user

## KEY PRESERVATION REQUIREMENTS

### Critical Features to Maintain:
1. **Enhanced Dashboard Sorting**: Date (newest first) → Status Priority (Overdue → Pending → Complete → Closed)
2. **Mobile-First Design**: All responsive layouts and mobile optimizations must work identically
3. **Invoice Workflow**: Create → Review → Edit → Finalize workflow must be preserved
4. **Sequential Invoice Numbering**: INV-YYYY-0001 format, auto-increment per user per year
5. **Professional Layout**: All styling, branding, and UI components must remain unchanged
6. **Form Validation**: Mobile-optimized validation with absolute positioning (no layout shifts)
7. **Toast Notifications**: Success/error feedback system
8. **PDF Generation**: Maintain infrastructure for PDF download capability

### Specific Components to Preserve:
- Enhanced RecentInvoices.tsx with sorting functionality
- Mobile-responsive InvoiceForm.tsx with validation
- Professional InvoiceReview.tsx layout
- Dashboard.tsx with analytics and sorting
- All mobile navigation and responsive features

## ENVIRONMENT SETUP

### Required Environment Variables:
```
# Database
DATABASE_URL=your_neon_postgresql_url
DIRECT_URL=your_neon_direct_url

# Authentication
NEXTAUTH_SECRET=your_nextauth_secret
NEXTAUTH_URL=your_deployment_url
GOOGLE_CLIENT_ID=your_google_oauth_client_id
GOOGLE_CLIENT_SECRET=your_google_oauth_client_secret

# Optional
GITHUB_CLIENT_ID=your_github_oauth_client_id
GITHUB_CLIENT_SECRET=your_github_oauth_client_secret
```

## TECHNOLOGY STACK REQUIREMENTS

### Current Stack (Preserve):
- Next.js 14 with App Router
- TypeScript with existing type definitions
- Tailwind CSS for styling
- React hooks for state management

### Add:
- NextAuth.js for authentication
- @vercel/postgres or pg for database connections
- Proper error handling and loading states

## DEPLOYMENT CONFIGURATION

### Replit Setup:
1. Install all dependencies from package.json
2. Set up Neon PostgreSQL database connection
3. Configure NextAuth.js with OAuth providers
4. Set up environment variables
5. Run database migrations to create tables
6. Test all functionality before deployment

### Testing Requirements:
1. Create test user account
2. Test invoice creation, editing, and finalization
3. Verify dashboard sorting works correctly
4. Test mobile responsiveness
5. Verify user isolation (users can't see each other's invoices)
6. Test authentication flow

## SUCCESS CRITERIA

The migration is successful when:
- ✅ All existing features work identically to localStorage version
- ✅ Multi-user authentication is working
- ✅ Database operations are fast and reliable
- ✅ Mobile experience is preserved perfectly
- ✅ Invoice numbering works correctly per user
- ✅ Dashboard sorting functions as designed
- ✅ System is ready for production use by Valerie De Leon, CSR #13025

## NOTES

- This system is ready for immediate production use by Valerie De Leon
- The multi-user architecture prepares for future court reporter customers
- All Valerie's specific branding and business information must be preserved
- The enhanced dashboard sorting feature is critical for professional use
- Mobile optimization is essential as court reporters often work on mobile devices

---

READY FOR PRODUCTION DEPLOYMENT 